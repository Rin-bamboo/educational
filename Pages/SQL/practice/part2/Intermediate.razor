@page "/SQL/Practice/Part2/Intermediate"

        <h1>SQLテスト - 中級編 (学校データベース)</h1>
        <p>このテストは、学校の生徒の受講記録や成績データを使用し、結合、集計、サブクエリ、条件付き取得といった応用的なSQL操作を測定することを目的としています。</p>
        <p><strong>注:</strong> 各問題の解答は、SQL Serverの構文に基づいて記述してください。</p>

        <button class="test-data-button" onclick="downloadTestData()">テストデータをダウンロード (.sql)</button>

        <h2>問題</h2>

        <p>以下のテーブル定義をもとに、各問題に解答してください。</p>

        <div class="table-definition">
            <h3>テーブル定義: <code>Students</code> (生徒情報 - 初級編より再掲)</h3>
            <pre>
CREATE TABLE Students (
    StudentID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    DateOfBirth DATE,
    EnrollmentDate DATE,
    Grade INT, -- 学年
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50)
);
            </pre>

            <h3>テーブル定義: <code>Courses</code> (科目情報 - 初級編より再掲)</h3>
            <pre>
CREATE TABLE Courses (
    CourseID INT PRIMARY KEY IDENTITY(1,1),
    CourseName NVARCHAR(100) NOT NULL,
    Credits INT, -- 単位数
    Department NVARCHAR(50), -- 所属学科
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50)
);
            </pre>

            <h3>テーブル定義: <code>Enrollments</code> (受講登録情報)</h3>
            <pre>
CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY IDENTITY(1,1),
    StudentID INT NOT NULL,
    CourseID INT NOT NULL,
    EnrollmentDate DATE,
    GradeScore INT, -- 点数 (0-100)
    Semester NVARCHAR(20), -- 'Spring', 'Fall'
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
            </pre>

            <h3>テーブル定義: <code>Teachers</code> (教員情報 - 初級編より再掲)</h3>
            <pre>
CREATE TABLE Teachers (
    TeacherID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    Specialty NVARCHAR(100), -- 専門分野
    HireDate DATE,
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50)
);
            </pre>

            <h3>テーブル定義: <code>CourseAssignments</code> (教員と科目の担当割り当て)</h3>
            <pre>
CREATE TABLE CourseAssignments (
    AssignmentID INT PRIMARY KEY IDENTITY(1,1),
    TeacherID INT NOT NULL,
    CourseID INT NOT NULL,
    AssignmentDate DATE,
    Semester NVARCHAR(20), -- 'Spring', 'Fall'
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50),
    FOREIGN KEY (TeacherID) REFERENCES Teachers(TeacherID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
            </pre>
        </div>

        <div class="question">
            <strong>問題 2.1:</strong> 各学年（<code>Grade</code>）ごとの有効な生徒数と、その学年の平均生年月日を計算するSQL文を記述してください。
            <div class="answer-area">
                <p>解答欄:</p>
                <textarea class="user-input" id="q2_1_input" placeholder="ここにSQL文を記述してください。"></textarea>
            </div>
        </div>

        <div class="question">
            <strong>問題 2.2:</strong> <code>Students</code>、<code>Enrollments</code>、<code>Courses</code>の3つのテーブルを結合し、各生徒の<code>FirstName</code>、<code>LastName</code>、受講している<code>CourseName</code>、およびその科目の<code>GradeScore</code>を取得するSQL文を記述してください。有効な生徒の有効な受講記録のみを対象とします。
            <div class="answer-area">
                <p>解答欄:</p>
                <textarea class="user-input" id="q2_2_input" placeholder="ここにSQL文を記述してください。"></textarea>
            </div>
        </div>

        <div class="question">
            <strong>問題 2.3:</strong> 2024年「Fall」学期に登録され、かつ平均点（<code>GradeScore</code>）が80点以上になる有効な科目の<code>CourseName</code>と平均点を取得するSQL文を記述してください。
            <div class="answer-area">
                <p>解答欄:</p>
                <textarea class="user-input" id="q2_3_input" placeholder="ここにSQL文を記述してください。"></textarea>
            </div>
        </div>

        <div class="question">
            <strong>問題 2.4:</strong> どの有効な科目にも割り当てられていない有効な教員（<code>Teachers</code>テーブル）の<code>FirstName</code>と<code>LastName</code>を取得するSQL文を記述してください。サブクエリを使用してください。
            <div class="answer-area">
                <p>解答欄:</p>
                <textarea class="user-input" id="q2_4_input" placeholder="ここにSQL文を記述してください。"></textarea>
            </div>
        </div>

        <div class="question">
            <strong>問題 2.5:</strong> 各教員（<code>TeacherID</code>）が担当した科目の総単位数（<code>Credits</code>の合計）を計算し、総単位数が専門分野（<code>Specialty</code>）が同じ教員グループの平均総単位数を超える教員の<code>FirstName</code>、<code>LastName</code>、専門分野、その教員の総単位数、およびその専門分野の平均総単位数を取得するSQL文を記述してください。有効な教員と科目割り当てのみを対象とします。
            <div class="answer-area">
                <p>解答欄:</p>
                <textarea class="user-input" id="q2_5_input" placeholder="ここにSQL文を記述してください。"></textarea>
            </div>
        </div>

        <button class="download-button" onclick="downloadUserAnswers('intermediate_school')">中級編の記述回答をダウンロード (.sql)</button>
        <button class="show-all-answers-button" onclick="downloadModelAnswers('intermediate_school')">中級編の模範回答をダウンロード (.sql)</button>

    
    <script>
        const modelAnswers_intermediate_school = {
            q2_1: `
-- 問題 2.1: 各学年ごとの有効な生徒数と平均生年月日
SELECT
    Grade,
    COUNT(StudentID) AS NumberOfStudents,
    AVG(CAST(DateOfBirth AS DECIMAL(18,0))) AS AverageDateOfBirthValue -- DATE型を平均化するための一時的な数値変換
    -- より正確な平均日付は複雑なので、ここでは数値変換による概算とします。
    -- または MIN/MAX で範囲を示すことが多い。
    -- 例: MIN(DateOfBirth) AS EarliestBirthDate, MAX(DateOfBirth) AS LatestBirthDate
FROM
    Students
WHERE
    Enabled = 1
GROUP BY
    Grade
ORDER BY
    Grade;
`,
            q2_2: `
-- 問題 2.2: 生徒、受講、科目の3テーブル結合
SELECT
    S.FirstName,
    S.LastName,
    C.CourseName,
    E.GradeScore
FROM
    Students AS S
JOIN
    Enrollments AS E ON S.StudentID = E.StudentID AND E.Enabled = 1
JOIN
    Courses AS C ON E.CourseID = C.CourseID AND C.Enabled = 1
WHERE
    S.Enabled = 1
ORDER BY
    S.LastName, S.FirstName, C.CourseName;
`,
            q2_3: `
-- 問題 2.3: 2024年「Fall」学期に登録され、平均点が80点以上の有効な科目
SELECT
    C.CourseName,
    AVG(E.GradeScore * 1.0) AS AverageScore -- 小数点以下も考慮
FROM
    Courses AS C
JOIN
    Enrollments AS E ON C.CourseID = E.CourseID
WHERE
    C.Enabled = 1
    AND E.Enabled = 1
    AND E.Semester = N'Fall'
    AND YEAR(E.EnrollmentDate) = 2024
GROUP BY
    C.CourseName
HAVING
    AVG(E.GradeScore * 1.0) >= 80
ORDER BY
    AverageScore DESC;
`,
            q2_4: `
-- 問題 2.4: どの有効な科目にも割り当てられていない有効な教員
SELECT
    T.FirstName,
    T.LastName
FROM
    Teachers AS T
WHERE
    T.Enabled = 1
    AND T.TeacherID NOT IN (
        SELECT DISTINCT TeacherID
        FROM CourseAssignments
        WHERE Enabled = 1
    )
ORDER BY
    T.LastName, T.FirstName;
`,
            q2_5: `
-- 問題 2.5: 総単位数が専門分野グループ平均を超える教員
WITH TeacherTotalCredits AS (
    SELECT
        T.TeacherID,
        T.FirstName,
        T.LastName,
        T.Specialty,
        ISNULL(SUM(C.Credits), 0) AS TotalAssignedCredits
    FROM
        Teachers AS T
    LEFT JOIN
        CourseAssignments AS CA ON T.TeacherID = CA.TeacherID AND CA.Enabled = 1
    LEFT JOIN
        Courses AS C ON CA.CourseID = C.CourseID AND C.Enabled = 1
    WHERE
        T.Enabled = 1
    GROUP BY
        T.TeacherID, T.FirstName, T.LastName, T.Specialty
),
SpecialtyAverageCredits AS (
    SELECT
        Specialty,
        AVG(TotalAssignedCredits * 1.0) AS AvgSpecialtyCredits
    FROM
        TeacherTotalCredits
    GROUP BY
        Specialty
)
SELECT
    TTC.FirstName,
    TTC.LastName,
    TTC.Specialty,
    TTC.TotalAssignedCredits,
    SAC.AvgSpecialtyCredits
FROM
    TeacherTotalCredits AS TTC
JOIN
    SpecialtyAverageCredits AS SAC ON TTC.Specialty = SAC.Specialty
WHERE
    TTC.TotalAssignedCredits > SAC.AvgSpecialtyCredits
ORDER BY
    TTC.Specialty, TTC.TotalAssignedCredits DESC;
`
        };

        function downloadUserAnswers(level) {
            let combinedUserAnswers = '';
            let filename = '';
            const timestamp = new Date().toISOString().replace(/[:.-]/g, '');

            if (level === 'intermediate_school') {
                filename = `sql_test_school_intermediate_my_answers_${timestamp}.sql`;
                combinedUserAnswers += `-- SQLテスト - 中級編 (学校データベース - 記述回答) ${new Date().toLocaleString()}\n\n`;
                combinedUserAnswers += `-- 問題 2.1\n` + document.getElementById('q2_1_input').value.trim() + '\n\n';
                combinedUserAnswers += `-- 問題 2.2\n` + document.getElementById('q2_2_input').value.trim() + '\n\n';
                combinedUserAnswers += `-- 問題 2.3\n` + document.getElementById('q2_3_input').value.trim() + '\n\n';
                combinedUserAnswers += `-- 問題 2.4\n` + document.getElementById('q2_4_input').value.trim() + '\n\n';
                combinedUserAnswers += `-- 問題 2.5\n` + document.getElementById('q2_5_input').value.trim() + '\n';
            }

            const headerLength = (`-- SQLテスト - 中級編 (学校データベース - 記述回答) `.length + new Date().toLocaleString().length + 2);
            if (combinedUserAnswers.trim().length <= headerLength) {
                alert('回答が記述されていません。');
                return;
            }

            const blob = new Blob([combinedUserAnswers.trim()], { type: 'text/plain;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        }

        function downloadModelAnswers(level) {
            let combinedAnswers = '';
            let filename = '';
            const timestamp = new Date().toISOString().replace(/[:.-]/g, '');

            if (level === 'intermediate_school') {
                filename = `sql_test_school_intermediate_model_answers_${timestamp}.sql`;
                combinedAnswers += `-- SQLテスト - 中級編 (学校データベース - 模範回答) ${new Date().toLocaleString()}\n\n`;
                combinedAnswers += modelAnswers_intermediate_school.q2_1 + '\n---\n';
                combinedAnswers += modelAnswers_intermediate_school.q2_2 + '\n---\n';
                combinedAnswers += modelAnswers_intermediate_school.q2_3 + '\n---\n';
                combinedAnswers += modelAnswers_intermediate_school.q2_4 + '\n---\n';
                combinedAnswers += modelAnswers_intermediate_school.q2_5 + '\n';
            }

            const blob = new Blob([combinedAnswers.trim()], { type: 'text/plain;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        }

        function downloadTestData() {
            const testDataSql = `
-- テストデータ投入用SQLスクリプト (中級編 - 学校データベース)
-- 注意: 既にデータが存在する場合は重複する可能性があります。
-- 必要に応じて TRUNCATE TABLE または DELETE FROM で既存データをクリアしてください。

-- 既存テーブルの削除（依存関係に注意）
IF OBJECT_ID('Enrollments', 'U') IS NOT NULL DROP TABLE Enrollments;
IF OBJECT_ID('CourseAssignments', 'U') IS NOT NULL DROP TABLE CourseAssignments;
IF OBJECT_ID('Students', 'U') IS NOT NULL DROP TABLE Students;
IF OBJECT_ID('Courses', 'U') IS NOT NULL DROP TABLE Courses;
IF OBJECT_ID('Teachers', 'U') IS NOT NULL DROP TABLE Teachers;

-- Students テーブル作成 (初級編より再掲)
CREATE TABLE Students (
    StudentID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    DateOfBirth DATE,
    EnrollmentDate DATE,
    Grade INT,
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50)
);

-- Courses テーブル作成 (初級編より再掲)
CREATE TABLE Courses (
    CourseID INT PRIMARY KEY IDENTITY(1,1),
    CourseName NVARCHAR(100) NOT NULL,
    Credits INT,
    Department NVARCHAR(50),
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50)
);

-- Teachers テーブル作成 (初級編より再掲)
CREATE TABLE Teachers (
    TeacherID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    Specialty NVARCHAR(100),
    HireDate DATE,
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50)
);

-- Enrollments テーブル作成
CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY IDENTITY(1,1),
    StudentID INT NOT NULL,
    CourseID INT NOT NULL,
    EnrollmentDate DATE,
    GradeScore INT,
    Semester NVARCHAR(20),
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

-- CourseAssignments テーブル作成
CREATE TABLE CourseAssignments (
    AssignmentID INT PRIMARY KEY IDENTITY(1,1),
    TeacherID INT NOT NULL,
    CourseID INT NOT NULL,
    AssignmentDate DATE,
    Semester NVARCHAR(20),
    Enabled BIT DEFAULT 1,
    InsertDate DATETIME DEFAULT GETDATE(),
    UpdateDate DATETIME DEFAULT GETDATE(),
    DeleteDate DATETIME,
    UpdateUser NVARCHAR(50),
    FOREIGN KEY (TeacherID) REFERENCES Teachers(TeacherID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

PRINT N'-- 中級編テストデータ挿入開始 (学校データベース) --';

-- Students データ
SET IDENTITY_INSERT Students ON;
INSERT INTO Students (StudentID, FirstName, LastName, DateOfBirth, EnrollmentDate, Grade, Enabled, UpdateUser) VALUES
(1, N'山田', N'太郎', '2008-07-20', '2021-04-01', 9, 1, N'Loader'),
(2, N'鈴木', N'一郎', '2009-03-10', '2022-04-01', 8, 1, N'Loader'),
(3, N'佐藤', N'美咲', '2007-11-05', '2020-04-01', 10, 1, N'Loader'),
(4, N'高橋', N'健太', '2008-09-25', '2021-04-01', 9, 1, N'Loader'),
(5, N'伊藤', N'さくら', '2009-01-01', '2022-04-01', 8, 0, N'Loader'), -- 論理削除済み
(6, N'渡辺', N'花子', '2008-06-01', '2021-04-01', 9, 1, N'Loader'); -- 課題2.4テスト用
SET IDENTITY_INSERT Students OFF;

-- Courses データ
SET IDENTITY_INSERT Courses ON;
INSERT INTO Courses (CourseID, CourseName, Credits, Department, Enabled, UpdateUser) VALUES
(101, N'国語I', 4, N'人文科学', 1, N'Loader'),
(102, N'数学A', 3, N'理数系', 1, N'Loader'),
(103, N'英語コミュニケーション', 2, N'人文科学', 1, N'Loader'),
(104, N'物理基礎', 3, N'理数系', 1, N'Loader'),
(105, N'日本史B', 4, N'社会科学', 0, N'Loader'), -- 論理削除済み
(106, N'化学', 3, N'理数系', 1, N'Loader'); -- 課題2.4テスト用
SET IDENTITY_INSERT Courses OFF;

-- Teachers データ
SET IDENTITY_INSERT Teachers ON;
INSERT INTO Teachers (TeacherID, FirstName, LastName, Specialty, HireDate, Enabled, UpdateUser) VALUES
(1, N'田中', N'啓太', N'国語', '2018-04-01', 1, N'Loader'),
(2, N'中村', N'由美', N'数学', '2019-09-01', 1, N'Loader'),
(3, N'小林', N'大輔', N'社会', '2022-04-01', 1, N'Loader'),
(4, N'吉田', N'彩香', N'体育', '2020-04-01', 0, N'Loader'), -- 論理削除済み
(5, N'木村', N'健一', N'理科', '2021-10-01', 1, N'Loader'), -- 課題2.4テスト用（未割り当て）
(6, N'井上', N'真理', N'数学', '2019-04-01', 1, N'Loader'); -- 課題2.5テスト用
SET IDENTITY_INSERT Teachers OFF;

-- Enrollments データ
SET IDENTITY_INSERT Enrollments ON;
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, EnrollmentDate, GradeScore, Semester, Enabled, UpdateUser) VALUES
(1, 1, 101, '2023-04-05', 85, N'Spring', 1, N'Loader'),
(2, 1, 102, '2023-04-05', 78, N'Spring', 1, N'Loader'),
(3, 2, 101, '2023-04-05', 92, N'Spring', 1, N'Loader'),
(4, 2, 103, '2023-04-05', 70, N'Spring', 1, N'Loader'),
(5, 3, 104, '2023-09-10', 95, N'Fall', 1, N'Loader'),
(6, 4, 102, '2023-09-10', 65, N'Fall', 1, N'Loader'),
(7, 1, 103, '2024-04-01', 88, N'Spring', 1, N'Loader'),
(8, 3, 101, '2024-09-01', 82, N'Fall', 1, N'Loader'), -- 2024 Fall
(9, 4, 106, '2024-09-01', 75, N'Fall', 1, N'Loader'), -- 2024 Fall
(10, 2, 104, '2023-04-05', 0, N'Spring', 0, N'Loader'); -- 論理削除済み
SET IDENTITY_INSERT Enrollments OFF;

-- CourseAssignments データ
SET IDENTITY_INSERT CourseAssignments ON;
INSERT INTO CourseAssignments (AssignmentID, TeacherID, CourseID, AssignmentDate, Semester, Enabled, UpdateUser) VALUES
(1, 1, 101, '2023-03-20', N'Spring', 1, N'Loader'),
(2, 2, 102, '2023-03-20', N'Spring', 1, N'Loader'),
(3, 1, 103, '2023-03-20', N'Spring', 1, N'Loader'),
(4, 2, 104, '2023-03-20', N'Spring', 1, N'Loader'),
(5, 3, 101, '2023-08-20', N'Fall', 1, N'Loader'),
(6, 6, 102, '2023-08-20', N'Fall', 1, N'Loader'), -- 数学教員
(7, 1, 103, '2024-03-20', N'Spring', 1, N'Loader'),
(8, 4, 105, '2023-03-20', N'Spring', 0, N'Loader'); -- 論理削除済み
SET IDENTITY_INSERT CourseAssignments OFF;

PRINT N'-- 中級編テストデータ挿入完了 (学校データベース) --';
            `;

            const blob = new Blob([testDataSql.trim()], { type: 'text/plain;charset=utf-8' });
            const link = document.createElement('a');
            const timestamp = new Date().toISOString().replace(/[:.-]/g, '');
            link.href = URL.createObjectURL(blob);
            link.download = `sql_test_school_intermediate_data_setup_${timestamp}.sql`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        }
    </script>

@code {

}
